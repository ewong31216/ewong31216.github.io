{"version":3,"sources":["logo.svg","components/navbar.js","components/slideshow.js","containers/home.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","props","className","Component","SlideShow","timeInterval","transition","slides","src","state","current","slideClassName","currentSrc","nextSrc","init","bind","move","this","next","length","setState","setTimeout","console","log","currentStyle","backgroundImage","nextStyle","style","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gJAAAA,EAAOC,QAAU,IAA0B,kC,0IC2B5BC,E,kDAvBX,WAAYC,GAAQ,uCACVA,G,qDAIN,OACI,yBAAKC,UAAU,WACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,cACX,yBAAKA,UAAU,UAAf,OACA,yBAAKA,UAAU,QAAf,OACA,yBAAKA,UAAU,WAAf,eAGR,yBAAKA,UAAU,SACX,yBAAKA,UAAU,kBAAf,aACA,yBAAKA,UAAU,cAAf,e,GAjBCC,a,OCqENC,E,kDApEX,WAAYH,GAAQ,IAAD,8BACf,cAAMA,IAEDI,aAAe,IACpB,EAAKC,WAAa,IAClB,EAAKC,OAAS,CAAC,CACXC,IAAK,oKACP,CACEA,IAAK,wJAET,EAAKC,MAAQ,CACTC,QAAS,EACTC,eAAgB,QAChBC,YAAY,EACZC,SAAS,GAGb,EAAKC,KAAO,EAAKA,KAAKC,KAAV,gBACZ,EAAKC,KAAO,EAAKA,KAAKD,KAAV,gBAlBG,E,mDAqBX,IACIL,EAAYO,KAAKR,MAAjBC,QACFQ,EAAOR,GAAWO,KAAKV,OAAOY,OAAS,EAAI,EAAIT,EAAU,EAE/DO,KAAKG,SAAS,CACVR,WAAYK,KAAKV,OAAOG,GAASF,IACjCK,QAASI,KAAKV,OAAOW,GAAMV,MAG/Ba,WAAWJ,KAAKD,KAAMC,KAAKZ,gB,6BAGvB,IAAD,OACHY,KAAKG,SAAS,CACVT,eAAgB,iBAEpBU,YAAW,WACPC,QAAQC,IAAI,EAAKd,MAAMC,SACvB,EAAKU,SAAS,CACVV,QAAS,EAAKD,MAAMC,SAAW,EAAKH,OAAOY,OAAS,EAAI,EAAI,EAAKV,MAAMC,QAAU,EACjFC,eAAgB,SACjB,EAAKG,QACTG,KAAKX,c,0CAIRW,KAAKH,S,+BAGC,IAAD,EAC2CG,KAAKR,MAA7CE,EADH,EACGA,eACFa,EAAe,CACbC,gBAAiB,QAHpB,EACmBb,WAEyB,MAE7Cc,EAAY,CACRD,gBAAiB,QANpB,EAC+BZ,QAKU,MAG9C,OACI,yBAAKX,UAAU,wBACX,yBAAKA,UAAYS,EAAiB,WAAagB,MAAQH,IACvD,yBAAKtB,UAAYS,EAAiB,QAAUgB,MAAQD,S,GA/D5CvB,aCiBTyB,E,kDAdX,WAAY3B,GAAQ,uCACVA,G,qDAIN,OACI,yBAAKC,UAAU,WACX,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GATGC,aCMJ0B,MANf,WACI,OACI,kBAAC,EAAD,OCKYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.31083545.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport { render } from 'react-dom';\n\nclass NavBar extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"nav-bar\">\n                <div className=\"logo\">\n                    <div className=\"logo-image\">\n                        <div className=\"prefix\">Siu</div>\n                        <div className=\"main\">Yan</div>\n                        <div className=\"postfix\">Hong Kong</div>\n                    </div>\n                </div>\n                <div className=\"items\">\n                    <div className=\"item wish-list\">Wish List</div>\n                    <div className=\"item login\">Login</div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default NavBar;\n","import React, { Component } from 'react';\nimport { render } from 'react-dom';\n\nclass SlideShow extends Component {\n    constructor(props) {\n        super(props);\n\n        this.timeInterval = 3000;\n        this.transition = 1000;\n        this.slides = [{\n            src: 'https://www.qoo-online.com/thegear/content/theme/media/shop/スライドバナー/2020/6月/Instalive items/the items in live stream.jpg'\n        },{\n            src: 'https://www.qoo-online.com/thegear/content/theme/media/shop/スライドバナー/2020/7月/SPECIAL PRICE/Speical price.jpg'\n        }];\n        this.state = {\n            current: 0,\n            slideClassName: 'slide',\n            currentSrc: false,\n            nextSrc: false\n        };\n\n        this.init = this.init.bind(this);\n        this.move = this.move.bind(this);\n    }\n\n    init() {\n        const { current } = this.state;\n        const next = current >= this.slides.length - 1 ? 0 : current + 1;\n\n        this.setState({\n            currentSrc: this.slides[current].src,\n            nextSrc: this.slides[next].src\n        });\n\n        setTimeout(this.move, this.timeInterval);\n    }\n    \n    move() {\n        this.setState({\n            slideClassName: 'slide moving'\n        });\n        setTimeout(() => {\n            console.log(this.state.current);\n            this.setState({\n                current: this.state.current >= this.slides.length - 1 ? 0 : this.state.current + 1,\n                slideClassName: 'slide'\n            }, this.init);\n        }, this.transition);\n    }\n\n    componentDidMount(){\n        this.init();\n    }\n\n    render() {\n        const { slideClassName, currentSrc, nextSrc } = this.state;\n        const currentStyle = {\n                backgroundImage: 'url(\\'' + currentSrc + '\\')'\n            },\n            nextStyle = {\n                backgroundImage: 'url(\\'' + nextSrc + '\\')'\n            };\n\n        return (\n            <div className=\"slide-show-container\">\n                <div className={ slideClassName + \" current\" } style={ currentStyle }></div>\n                <div className={ slideClassName + \" next\" } style={ nextStyle }></div>\n            </div>\n        );\n    }\n}\n\nexport default SlideShow;\n","import React, { Component } from 'react';\nimport { render } from 'react-dom';\nimport NavBar from '../components/navbar';\nimport SlideShow from '../components/slideshow';\n\nclass Home extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className=\"content\">\n                <NavBar></NavBar>\n                <SlideShow></SlideShow>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './containers/home';\n\nfunction App() {\n    return (\n        <Home></Home>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}