{"version":3,"sources":["Chart.js","App.js","serviceWorker.js","index.js"],"names":["Chart","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","color","i","Math","floor","random","_this","_this$props","data","dataKeys","react_default","a","createElement","LineChart","width","height","margin","top","right","bottom","left","map","dataKey","Line","type","connectNulls","stroke","getRandomColor","key","XAxis","YAxis","Legend","wrapperStyle","Tooltip","Component","App","toggleMenu","bind","assertThisInitialized","applyFilter","chart","filter","processData","onChange","onUpdate","index","date","visit","visitScore","home","homeScore","state","textarea","dataValid","chartData","name","menu","$","hasClass","removeClass","addClass","_this2","chartObj","types","dates","document","querySelectorAll","forEach","push","value","team","teamName","teamRecord","teams","keys","record","indexOf","score","length","setState","src_Chart","_this3","className","onClick","sort","defaultChecked","clear","str","_this4","lines","split","labels","shift","line","e","target","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2a27d621.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {\n    LineChart,\n    Line,\n    Legend,\n    XAxis,\n    YAxis,\n    Tooltip\n    } from 'recharts';\n\nclass Chart extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    getRandomColor() {\n        var letters = '0123456789ABCDEF';\n        var color = '#';\n        for (var i = 0; i < 6; i++) {\n            color += letters[Math.floor(Math.random() * 16)];\n        }\n        return color;\n    }\n\n    render(){\n        const { data, dataKeys } = this.props;\n\n        return data ? (\n            <LineChart width={800} height={600} data={data} margin={{ top: 60, right: 20, bottom: 5, left: 0 }}>\n            { dataKeys.map(dataKey =>\n                <Line type=\"monotone\" connectNulls={true} dataKey={dataKey} stroke={this.getRandomColor()} key={dataKey} />\n            )}\n                <XAxis dataKey=\"date\" />\n                <YAxis />\n                <Legend wrapperStyle={{ top: 0 }} />\n                <Tooltip />\n            </LineChart>\n        ) : false;\n    }\n}\n\nexport default Chart;","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport './App.css';\nimport Chart from './Chart';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n\n        this.toggleMenu = this.toggleMenu.bind(this);\n        this.applyFilter = this.applyFilter.bind(this);\n        this.chart = this.chart.bind(this);\n        this.filter = this.filter.bind(this);\n        this.processData = this.processData.bind(this);\n        this.onChange = this.onChange.bind(this);\n        this.onUpdate = this.onUpdate.bind(this);\n\n        this.index = {\n            date: 0,\n            visit: 2,\n            visitScore: 3,\n            home: 4,\n            homeScore: 5\n        };\n\n        this.state = {\n            textarea: false,\n            data: false,\n            dataValid: false,\n            chartData: false\n        };\n    }\n\n    toggleMenu(name){\n        let menu = $('.drop-down-menu.' + name);\n\n        if(menu.hasClass('show')){\n            menu.removeClass('show');\n        }else{\n            $('.drop-down-menu').removeClass('show');\n            menu.addClass('show');\n        }\n        this.applyFilter();\n    }\n\n    applyFilter(){\n        let chartObj = {},\n            types = [],\n            chartData = [],\n            dataKeys = [];\n\n        this.state.data.dates.map(date => chartObj[date] = []);\n\n        document.querySelectorAll('.drop-down-menu.type input[type=checkbox]:checked').forEach(type => {\n            types.push(type.value);\n        });\n\n        document.querySelectorAll('.drop-down-menu.teams input[type=checkbox]:checked').forEach(team => {\n            let teamName = team.value,\n                teamRecord = this.state.data.teams[teamName];\n\n            if(teamRecord){\n                dataKeys.push(teamName);\n\n                Object.keys(teamRecord).map(date => {\n                    let record = teamRecord[date];\n\n                    if(record && types.indexOf(record.type) !== -1){\n                        chartObj[date].push({\n                            team: teamName,\n                            score: record.score\n                        });\n                    }\n                });\n            }\n        });\n\n        Object.keys(chartObj).forEach(date => {\n            let teams = chartObj[date],\n                data = {\n                    date: date\n                };\n\n            teams.map(team => {\n                data[team.team] = team.score;\n            });\n\n            chartData.push(data);\n        });\n\n        if(dataKeys.length) {\n            this.setState({\n                chartData: {\n                    dataKeys: dataKeys,\n                    data: chartData\n                }\n            });\n        }\n    }\n\n    chart(){\n        return this.state.chartData ? (\n            <Chart {...this.state.chartData}></Chart>\n        ) : false;\n    }\n\n    filter(){\n        return this.state.dataValid ? (\n            <div className=\"filter\">\n                <span><strong>Filter:</strong> </span>\n                <div className=\"item\">\n                    <span onClick={() => this.toggleMenu(\"teams\")}>Select Teams</span>\n                    <div className=\"drop-down-menu teams\">\n                    { Object.keys(this.state.data.teams).sort().map(name =>\n                        <label className=\"team\" key={name}>\n                            <input type=\"checkbox\" value={name} /> { name }\n                        </label>\n                    )}\n                    </div>\n                </div>\n                <div className=\"item\">\n                    <span onClick={() => this.toggleMenu(\"type\")}>Select Type</span>\n                    <div className=\"drop-down-menu type\">\n                        <label className=\"type\">\n                            <input type=\"checkbox\" value=\"home\" defaultChecked/> Home\n                        </label>\n                        <label className=\"type\">\n                            <input type=\"checkbox\" value=\"visit\" defaultChecked/> Visit\n                        </label>\n                    </div>\n                </div>\n                <br clear=\"all\" />\n            </div>\n        ) : false;\n    }\n\n    processData(str){\n        if(str && str.length){\n            let lines = str.split(\"\\n\"),\n                labels = lines.shift().split(','),\n                dates = [],\n                teams = {};\n\n            lines.forEach(line => {\n                let record = line.split(','),\n                    date = record[this.index.date],\n                    visit = record[this.index.visit],\n                    visitScore = record[this.index.visitScore],\n                    home = record[this.index.home],\n                    homeScore = record[this.index.homeScore];\n\n                if(date) {\n                    if (dates.indexOf(date) === -1) {\n                        dates.push(date);\n                    }\n                    if (visit && visitScore) {\n                        if(!teams[visit]){\n                            teams[visit] = {};\n                        }\n                        teams[visit][date] = {\n                            type: 'visit',\n                            score: visitScore\n                        };\n                    }\n                    if(home && homeScore){\n                        if(!teams[home]){\n                            teams[home] = {};\n                        }\n                        teams[home][date] = {\n                            type: 'home',\n                            score: homeScore\n                        };\n                    }\n                }\n            });\n\n            return {\n                labels: labels,\n                dates: dates.sort(),\n                teams: teams\n            };\n        }\n    }\n\n    onChange(e){\n        this.setState({\n            textarea: e.target.value\n        });\n    }\n\n    onUpdate(){\n        let data = this.processData(this.state.textarea);\n\n        if(data) {\n            this.setState({\n                data: data,\n                dataValid: true\n            });\n        }else{\n            this.setState({\n                dataValid: false,\n                chartData: false\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <this.chart/>\n                <this.filter/>\n                <textarea className=\"data-input\" onChange={this.onChange}></textarea>\n                <button className=\"data-update\" onClick={this.onUpdate}>Update Data</button>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}