{"version":3,"sources":["GameOption.js","Digital.js","GameStatus.js","Cell.js","GameBoard.js","App.js","serviceWorker.js","index.js"],"names":["GameOption","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","changeRow","bind","assertThisInitialized","changeColumn","changeMine","changeTimer","minMines","maxMines","randomMines","setupBoard","validSetup","setGameData","startGame","state","rows","columns","mines","timer","opened","mine","flag","number","e","target","isNaN","value","setState","Math","max","round","mineArray","length","index","floor","random","indexOf","push","sort","board","i","j","assign","initCell","parseInt","setupGame","react_default","a","createElement","className","type","onChange","clear","disabled","onClick","Component","Digital","digits","lengths","data","pow","values","getValues","b","c","d","f","g","thisValue","_this2","map","digit","key","GameStatus","src_Digital","Cell","content","openedMine","openedEmpty","updateFlagged","onContextMenu","row","column","exploded","prevProps","prevState","_this$props","mode","index_es","icon","explodedMine","increase","_this$state","stopPropagation","preventDefault","_this$state2","_this$state3","GameBoard","lostGame","updateCell","decreaseTimer","gameData","fillNumber","startTimer","getRelatedRows","getRelatedColumns","count","thisRow","thisColumn","newGameData","getAllRows","getAllColumns","calculateNumber","changeMode","params","defineProperty","self","setTimeout","offset","_this3","src_GameStatus","src_Cell","library","add","faFlag","App","startNewGame","header","footer","window","confirm","src_GameOption","src_GameBoard","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c5ac5979.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass GameOption extends Component{\n    constructor(props){\n        super(props);\n\n        this.changeRow = this.changeRow.bind(this);\n        this.changeColumn = this.changeColumn.bind(this);\n        this.changeMine = this.changeMine.bind(this);\n        this.changeTimer = this.changeTimer.bind(this);\n        this.minMines = this.minMines.bind(this);\n        this.maxMines = this.maxMines.bind(this);\n        this.randomMines = this.randomMines.bind(this);\n        this.setupBoard = this.setupBoard.bind(this);\n        this.validSetup = this.validSetup.bind(this);\n        this.setGameData = this.setGameData.bind(this);\n        this.startGame = this.startGame.bind(this);\n\n        this.state = {\n            rows: 9,\n            columns: 9,\n            mines: 10,\n            timer: 200\n        }\n    };\n\n    // Initial setting up of Cell object\n    initCell(){\n        return {\n            opened: false,\n            mine: false,\n            flag: false,\n            number: 0\n        }\n    }\n\n    // List of functions handling user input for different options\n    changeRow(e){\n        if(e && e.target && (!isNaN(e.target.value) || e.target.value === '')){\n            this.setState({\n                rows: e.target.value\n            });\n        }\n    }\n\n    changeColumn(e){\n        if(e && e.target && (!isNaN(e.target.value) || e.target.value === '')){\n            this.setState({\n                columns: e.target.value\n            });\n        }\n    }\n\n    changeMine(e){\n        if(e && e.target && (!isNaN(e.target.value) || e.target.value === '')){\n            this.setState({\n                mines: e.target.value\n            });\n        }\n    }\n\n    changeTimer(e){\n        if(e && e.target && (!isNaN(e.target.value) || e.target.value === '')){\n            this.setState({\n                timer: e.target.value\n            });\n        }\n    }\n\n    // dynamically generate minimum and maximum of mines allowed\n    minMines(){\n        return Math.max(Math.round(0.1 * this.state.rows * this.state.columns / 10) * 10, 5);\n    }\n\n    maxMines(){\n        return Math.round(0.8 * this.state.rows * this.state.columns / 10) * 10;\n    }\n\n    // Randomly assign mines to gameData before starting the game\n    randomMines(){\n        let mineArray = [],\n            max = this.state.rows * this.state.columns;\n\n        while(mineArray.length < this.state.mines){\n            let index = Math.floor(Math.random() * max);\n\n            if(mineArray.indexOf(index) === -1){\n                mineArray.push(index);\n            }\n        }\n        return mineArray.sort();\n    }\n\n    // Once setting is valid, set up the board and call randomMines\n    setupBoard(){\n        let board = {},\n            mines = this.randomMines();\n\n        for (let i = 0; i < this.state.rows; i++){\n            board[i] = {};\n\n            for (let j = 0; j < this.state.columns; j++){\n                let mine = mines.indexOf(i * this.state.columns + j) > -1;\n\n                board[i][j] = Object.assign({}, this.initCell(), { mine: mine });\n            }\n        }\n\n        return board;\n    }\n\n    // Function to check if all user inputs are valid\n    validSetup(){\n        if(this.state.rows < 5 || this.state.rows > 30){\n            return false;\n        }\n\n        if(this.state.columns < 5 || this.state.columns > 30){\n            return false;\n        }\n\n        if(this.state.mines < this.minMines() || this.state.mines > this.maxMines()){\n            return false;\n        }\n\n        if(this.state.timer < 10 || this.state.timer > 999){\n            return false;\n        }\n\n        return true;\n    }\n\n    // Package the format for gameData and return to App\n    setGameData(){\n        return {\n            rows: parseInt(this.state.rows, 10),\n            columns: parseInt(this.state.columns, 10),\n            mines: parseInt(this.state.mines, 10),\n            timer: parseInt(this.state.timer, 10),\n            board: this.setupBoard()\n        };\n    }\n\n    startGame(){\n        if(this.validSetup()) {\n            this.props.setupGame(this.setGameData());\n        }\n    }\n\n    render(){\n        return (\n            <div className=\"game-option\">\n                <div className=\"title\">Game Option</div>\n                <div className=\"options\">\n                    <div className=\"option\">\n                        <div className=\"caption\">Number of Cells per Row<div className=\"helptext\">(5 - 30)</div></div>\n                        <input type=\"text\" className=\"input\" onChange={this.changeRow} value={this.state.rows} />\n                        <br clear=\"all\" />\n                    </div>\n                    <div className=\"option\">\n                        <div className=\"caption\">Number of Cells per Column<div className=\"helptext\">(5 - 30)</div></div>\n                        <input type=\"text\" className=\"input\" onChange={this.changeColumn} value={this.state.columns} />\n                        <br clear=\"all\" />\n                    </div>\n                    <div className=\"option\">\n                        <div className=\"caption\">Number of Mines<div className=\"helptext\">({this.minMines()} - {this.maxMines()})</div></div>\n                        <input type=\"text\" className=\"input\" onChange={this.changeMine} value={this.state.mines} />\n                        <br clear=\"all\" />\n                    </div>\n                    <div className=\"option\">\n                        <div className=\"caption\">Time Limit (seconds)<div className=\"helptext\">(10 - 999)</div></div>\n                        <input type=\"text\" className=\"input\" onChange={this.changeTimer} value={this.state.timer} />\n                        <br clear=\"all\" />\n                    </div>\n                </div>\n                <div className=\"buttons\">\n                    <button className=\"submit-button\" disabled={!this.validSetup()} onClick={this.startGame}>Start Game</button>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default GameOption;","import React, { Component } from 'react';\n\nclass Digital extends Component {\n    constructor(props) {\n        super(props);\n\n        const digits = props.digits || 1;\n\n        let lengths = [];\n\n        for(let i = 0; i < digits; i++){\n            lengths.push(i);\n        }\n\n        this.data = {\n            lengths: lengths\n        };\n\n        this.state = {\n            max: Math.pow(10, digits),\n            digits: digits,\n            value: props.value,\n            values: this.getValues(props.value)\n        };\n    }\n\n    digit(props){\n        // K map type of evaluating what stoke to display for corresponding digit using CSS\n        const digits = {\n                'a': [0, 2, 3, 5, 6, 7, 8, 9],\n                'b': [0, 4, 5, 6, 8, 9],\n                'c': [0, 1, 2, 3, 4, 7, 8, 9],\n                'd': [2, 3, 4, 5, 6, 8, 9],\n                'e': [0, 2, 6, 8],\n                'f': [0, 1, 3, 4, 5, 6, 7, 8, 9],\n                'g': [0, 2, 3, 5, 6, 8, 9]\n            },\n            { value } = props || { value: 0 };\n\n        return (\n            <div className=\"digit\">\n                <div className={ \"stroke horizontal digit-a\" + (digits['a'].indexOf(value) > -1 ? ' on' : '')}></div>\n                <div className={ \"stroke vertical digit-b\" + (digits['b'].indexOf(value) > -1 ? ' on' : '')}></div>\n                <div className={ \"stroke vertical digit-c\" + (digits['c'].indexOf(value) > -1 ? ' on' : '')}></div>\n                <div className={ \"stroke horizontal digit-d\" + (digits['d'].indexOf(value) > -1 ? ' on' : '')}></div>\n                <div className={ \"stroke vertical digit-e\" + (digits['e'].indexOf(value) > -1 ? ' on' : '')}></div>\n                <div className={ \"stroke vertical digit-f\" + (digits['f'].indexOf(value) > -1 ? ' on' : '')}></div>\n                <div className={ \"stroke horizontal digit-g\" + (digits['g'].indexOf(value) > -1 ? ' on' : '')}></div>\n            </div>\n        );\n    }\n\n    // Construct an array of digits from least to largest, e.g. 145 => [5, 4, 1]\n    getValues(thisValue){\n        let values = [];\n\n        while(thisValue >= 10){\n            values.push(thisValue % 10);\n            thisValue = Math.floor(thisValue / 10);\n        }\n\n        values.push(thisValue);\n\n        return values;\n    }\n\n    componentDidUpdate(){\n        const { value } = this.props;\n\n        // Generate array for digits if value changed\n        if(!isNaN(value) && value !== this.state.value && value < this.state.max && value >= 0){\n            let values = this.getValues(value);\n\n            this.setState({\n                value: value,\n                values: values\n            });\n        }\n    }\n\n    render(){\n        return (\n            <div className=\"digital\">\n            { this.data.lengths.map(digit => (\n                <this.digit value={this.state.values[digit]} key={digit}/>\n            ))}\n            </div>\n        );\n    }\n}\n\nexport default Digital;","import React, { Component } from 'react';\nimport Digital from './Digital';\n\nclass GameStatus extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            digits: 3\n        };\n    }\n\n    render(){\n        return (\n            <div className=\"game-status\">\n                <div className=\"timer\">\n                    <Digital digits={this.state.digits} value={this.props.mines}/>\n                </div>\n                <div className=\"flagged\">\n                    <Digital digits={this.state.digits} value={this.props.timer}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default GameStatus;","import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nclass Cell extends Component {\n    constructor(props){\n        super(props);\n\n        this.content = this.content.bind(this);\n        this.openedMine = this.openedMine.bind(this);\n        this.openedEmpty = this.openedEmpty.bind(this);\n        this.updateFlagged = this.updateFlagged.bind(this);\n        this.onClick = this.onClick.bind(this);\n        this.onContextMenu = this.onContextMenu.bind(this);\n\n        this.state = {\n            row: props.row,\n            column: props.column,\n            opened: props.opened || false,\n            flag: props.flag || false,\n            exploded: false\n        };\n    }\n\n    // Trigger the action for opening up a cell, mainly for automatically opened up from adjacent cell with 0 count\n    componentDidUpdate(prevProps, prevState){\n        if(!prevState.opened && this.state.opened) {\n            if(this.props.mine) {\n                this.openedMine();\n            }else {\n                this.openedEmpty();\n            }\n        }else if(!prevProps.opened && this.props.opened){\n            this.onClick();\n        }\n    }\n\n    content(){\n        const { mode, mine, number } = this.props,\n            { opened } = this.state;\n\n        // Should appropriate content based on status of the game and user input, e.g. show all mines if user lost\n        if(!opened){\n            return mode === 'lost' && mine ? (\n                <div className=\"mine\"></div>\n            ) : (this.state.flag ? (\n                <div className=\"flag\">\n                    <FontAwesomeIcon icon=\"flag\" />\n                </div>\n            ) : false);\n        }else{\n            return (mine || number > 0) ? (mine ? (\n                <div className=\"mine\"></div>\n            ): (\n                <div className={\"number number\" + number}>{ number }</div>\n            )) : false;\n        }\n    }\n\n    // User basically lose the game if opening up a cell with a mine\n    openedMine(){\n        this.setState({\n            exploded: true\n        });\n        this.props.explodedMine(this.state.row, this.state.column);\n    }\n\n    openedEmpty(){\n        this.props.openedEmpty(this.state.row, this.state.column);\n    }\n\n    // When user set or unset a flag, need to update the count and propagate to Game Board and App and Game Status to display\n    updateFlagged(increase){\n        this.props.updateFlagged(increase);\n    }\n\n    // Open a cell, if not flagged or already opened\n    onClick(){\n        const { mode } = this.props,\n            { opened, flag } = this.state;\n\n        if(mode === 'started' && !opened && !flag){\n            this.setState({\n                opened: true\n            });\n        }\n    }\n\n    // Set a flag, also to avoid default action for showing context menu from browser\n    onContextMenu(e){\n        e.stopPropagation();\n        e.preventDefault();\n\n        const { mode } = this.props,\n            { opened, flag } = this.state;\n\n        if(mode === 'started' && !opened){\n            this.setState({\n                flag: !flag\n            });\n\n            this.updateFlagged(!flag);\n        }\n    }\n\n    render(){\n        const { opened, exploded } = this.state;\n\n        return (\n            <div className={\"cell\" + (opened ? ' opened' + (exploded ? ' exploded' : '') : '')} onClick={this.onClick} onContextMenu={this.onContextMenu}>\n                <this.content />\n            </div>\n        );\n    }\n}\n\nexport default Cell;","import React, { Component } from 'react';\nimport GameStatus from './GameStatus';\nimport Cell from './Cell';\n\nclass GameBoard extends Component{\n    constructor(props){\n        super(props);\n\n        this.lostGame = this.lostGame.bind(this);\n        this.updateCell = this.updateCell.bind(this);\n        this.decreaseTimer = this.decreaseTimer.bind(this);\n        this.openedEmpty = this.openedEmpty.bind(this);\n        this.updateFlagged = this.updateFlagged.bind(this);\n\n        this.data = {\n            rows: [],\n            columns: []\n        };\n\n        for(let i = 0; i < props.gameData.rows; i++){\n            this.data.rows.push(i);\n        }\n\n        for(let i = 0; i < props.gameData.columns; i++){\n            this.data.columns.push(i);\n        }\n\n        this.state = {\n            gameData: this.fillNumber(props.gameData),\n            startTimer: false,\n            timer: props.gameData.timer || 999,\n            opened: 0,\n            mines: props.gameData.mines\n        };\n    };\n\n    // Generate an array for all rows for using .map\n    getAllRows(){\n        let rows = [];\n\n        for(let i = 0; i < this.props.gameData.rows; i++){\n            rows.push(i);\n        }\n\n        return rows;\n    }\n\n    // Generate an array for all columns for using .map\n    getAllColumns(){\n        let columns = [];\n\n        for(let i = 0; i < this.props.gameData.columns; i++){\n            columns.push(i);\n        }\n\n        return columns;\n    }\n\n    // Generate an array for related rows for using .map\n    getRelatedRows(row){\n        let rows = [];\n\n        for(let i = row - 1; i <= row + 1; i++){\n            if(i > -1 && i < this.props.gameData.rows){\n                rows.push(i);\n            }\n        }\n\n        return rows;\n    }\n\n    // Generate an array for related columns for using .map\n    getRelatedColumns(column){\n        let columns = [];\n\n        for(let i = column - 1; i <= column + 1; i++){\n            if(i > -1 && i < this.props.gameData.columns){\n                columns.push(i);\n            }\n        }\n\n        return columns;\n    }\n\n    // Calculate the number displayed in the cell for number of mines in adjacent cells\n    calculateNumber(gameData, row, column){\n        let rows = this.getRelatedRows(row),\n            columns = this.getRelatedColumns(column),\n            count = 0;\n\n        rows.map(thisRow =>\n            columns.map(thisColumn => {\n                let cell = gameData.board[thisRow][thisColumn];\n\n                if(cell.mine){\n                    count++;\n                }\n\n                return true;\n            })\n        );\n\n        return count;\n    }\n\n    // Fill the number for all the cells initially after mines are randomly generated\n    fillNumber(gameData){\n        let newGameData = Object.assign({}, gameData),\n            rows = this.getAllRows(),\n            columns = this.getAllColumns();\n\n        rows.map(thisRow => {\n            columns.map(thisColumn => {\n                newGameData.board[thisRow][thisColumn].number = this.calculateNumber(newGameData, thisRow, thisColumn);\n\n                return true;\n            });\n\n            return true;\n        });\n\n        return newGameData;\n    }\n\n    lostGame(){\n        this.props.changeMode('lost');\n    }\n\n    // set State for updating Cell status\n    updateCell(row, column, params){\n        const { gameData } = this.state;\n\n        this.setState({\n            'gameData': Object.assign({}, gameData, {\n                'board': Object.assign({}, gameData.board, {\n                    [row]: Object.assign({}, gameData.board[row], {\n                        [column]: Object.assign({}, gameData.board[row][column], params)\n                    })\n                })\n            })\n        });\n    }\n\n    // A recursive function to decrease the timer every 1 seconds\n    decreaseTimer(){\n        let self = this;\n\n        if(this.props.mode === 'started' && this.state.startTimer) {\n            if(this.state.timer <= 1) {\n                this.lostGame();\n            }\n            this.setState({\n                timer: this.state.timer - 1\n            }, () => {\n                setTimeout(self.decreaseTimer, 1000);\n            });\n        }\n    }\n\n    // Called from Cell component when opened a cell with no mines in it\n    openedEmpty(row, column){\n        const { gameData } = this.state;\n\n        let self = this,\n            count = gameData.board[row][column].number;\n\n        // Checking to see if all the cells with no mines are opened, and set winning status if so\n        if(this.state.opened + gameData.mines + 1 >= gameData.rows * gameData.columns){\n            this.props.changeMode('won');\n        }else {\n            this.setState({\n                opened: this.state.opened + 1\n            });\n\n            // Timer is started once the first empty cell is opened\n            if (!this.state.startTimer) {\n                this.setState({\n                    startTimer: true\n                });\n                setTimeout(self.decreaseTimer, 1000);\n            }\n\n            // Open up adjacent cells if all empty\n            if (count === 0) {\n                let rows = this.getRelatedRows(row),\n                    columns = this.getRelatedColumns(column);\n\n                rows.map(thisRow => {\n                    columns.map(thisColumn => {\n                        if (!gameData.board[thisRow][thisColumn].opened) {\n                            setTimeout(() => self.updateCell(thisRow, thisColumn, {opened: true}), 0);\n                        }\n\n                        return true;\n                    });\n\n                    return true;\n                });\n            }\n        }\n    }\n\n    // When user mark a flag, update Game Status count for remaining mines\n    updateFlagged(increase){\n        let mines = this.state.mines,\n            offset = increase ? 1 : -1;\n\n        this.setState({\n            mines: mines - offset\n        });\n    }\n\n    render(){\n        const { mode } = this.props,\n            { gameData } = this.state;\n\n        return (\n            <div className=\"game-board\">\n                <GameStatus timer={this.state.timer} mines={this.state.mines} />\n            { this.data.rows.map(row =>\n                <div className=\"row\" key={'row' + row}>\n                { this.data.columns.map(column =>\n                    <Cell {...gameData.board[row][column]} explodedMine={this.lostGame} openedEmpty={this.openedEmpty} updateFlagged={this.updateFlagged} mode={mode} row={row} column={column} key={'cell' + row * gameData.rows + column}/>\n                )}\n                    <br clear=\"all\" />\n                </div>\n            )}\n            </div>\n        );\n    }\n}\n\nexport default GameBoard;","import React, { Component } from 'react';\nimport GameOption from './GameOption';\nimport GameBoard from './GameBoard';\nimport './App.css';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faFlag } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faFlag);\n\nclass App extends Component {\n    constructor(props){\n        super(props);\n\n        this.setupGame = this.setupGame.bind(this);\n        this.changeMode = this.changeMode.bind(this);\n        this.startNewGame = this.startNewGame.bind(this);\n        this.header = this.header.bind(this);\n        this.content = this.content.bind(this);\n        this.footer = this.footer.bind(this);\n\n        this.state = {\n            mode: 'new',\n            gameData: {}\n        };\n    }\n\n    //to be called by GameOption for gameData, and also set mode to started\n    setupGame(gameData){\n        this.setState({\n            mode: 'started',\n            gameData: gameData\n        });\n    }\n\n    changeMode(mode){\n        this.setState({\n            mode: mode\n        });\n    }\n\n    startNewGame(){\n        // Only prompt user if in a game session\n        if(this.state.mode === 'started') {\n            if (window.confirm(\"Are you sure you want to start a new game?\")) {\n                this.changeMode('new');\n            }\n        }else{\n            this.changeMode('new');\n        }\n    }\n\n    header(){\n        const {mode} = this.state;\n\n        switch(mode){\n            case 'won':\n                return (\n                    <div className=\"message\">\n                        <h2 className=\"won\">Congratulations!</h2>\n                        <h3>You won!</h3>\n                    </div>\n                );\n            case 'lost':\n                return (\n                    <div className=\"message\">\n                        <h2 className=\"lost\">Oh Nooooooo!</h2>\n                        <h3>You lost!</h3>\n                    </div>\n                );\n            default:\n                return (\n                    <div className=\"message\">\n                        <h1 className=\"game\">Welcome to Mine Sweeper</h1>\n                        <h3>By Eric Wong - December 18, 2018</h3>\n                    </div>\n                );\n        }\n    }\n\n    content(){\n        const {mode} = this.state;\n\n        switch(mode){\n            case 'new': //Before the game, only show Game Option\n                return (\n                    <GameOption setupGame={this.setupGame}></GameOption>\n                );\n            case 'started':\n            case 'won':\n            case 'lost':\n                // Showing the game board for wining, losing or during a game\n                return (\n                    <GameBoard mode={mode} gameData={this.state.gameData} changeMode={this.changeMode}></GameBoard>\n                );\n            default:\n                return false;\n        }\n    }\n\n    footer(){\n        const {mode} = this.state;\n\n        // Game Option has its own button to start the game, and should not be allowed to start a new game\n        return mode !== 'new' ? (\n            <div className=\"buttons\">\n                <button className=\"submit-button\" onClick={ this.startNewGame }>Start another Game</button>\n            </div>\n        ) : false;\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"header\">\n                    <this.header/>\n                </div>\n                <div className=\"content\">\n                    <this.content/>\n                </div>\n                <div className=\"footer\">\n                    <this.footer/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}